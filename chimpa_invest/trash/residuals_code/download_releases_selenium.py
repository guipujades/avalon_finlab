#!/usr/bin/env python3
"""
Download de Releases com Selenium
=================================
Usa Selenium para baixar PDFs que exigem JavaScript ou redirecionamentos complexos.
"""

import os
import time
import json
from pathlib import Path
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import re


class ReleaseDownloaderSelenium:
    """
    Downloader de releases usando Selenium para navega√ß√£o automatizada.
    """
    
    def __init__(self, download_dir: str = None):
        if download_dir is None:
            download_dir = str(Path.cwd() / "documents" / "releases_selenium")
        
        self.download_dir = Path(download_dir)
        self.download_dir.mkdir(parents=True, exist_ok=True)
        
        # Configurar Chrome
        self.chrome_options = Options()
        self.chrome_options.add_experimental_option('prefs', {
            'download.default_directory': str(self.download_dir),
            'download.prompt_for_download': False,
            'download.directory_upgrade': True,
            'safebrowsing.enabled': True,
            'plugins.always_open_pdf_externally': True
        })
        
        # Adicionar op√ß√µes para headless (sem interface gr√°fica)
        # Comente a linha abaixo se quiser ver o navegador funcionando
        self.chrome_options.add_argument('--headless')
        self.chrome_options.add_argument('--disable-gpu')
        self.chrome_options.add_argument('--no-sandbox')
        self.chrome_options.add_argument('--disable-dev-shm-usage')
        
        self.driver = None
    
    def iniciar_navegador(self):
        """
        Inicia o navegador Chrome.
        """
        try:
            self.driver = webdriver.Chrome(options=self.chrome_options)
            print("‚úÖ Navegador iniciado com sucesso")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao iniciar navegador: {e}")
            print("\n‚ö†Ô∏è  Certifique-se de ter o Chrome e o ChromeDriver instalados!")
            print("   Download ChromeDriver: https://chromedriver.chromium.org/")
            return False
    
    def fechar_navegador(self):
        """
        Fecha o navegador.
        """
        if self.driver:
            self.driver.quit()
            print("‚úÖ Navegador fechado")
    
    def baixar_documento_cvm(self, url: str, nome_arquivo: str, timeout: int = 30) -> bool:
        """
        Baixa um documento da CVM usando Selenium.
        """
        if not self.driver:
            print("‚ùå Navegador n√£o iniciado")
            return False
        
        try:
            print(f"üì• Acessando: {url}")
            self.driver.get(url)
            
            # Aguardar p√°gina carregar
            time.sleep(3)
            
            # Verificar se √© um PDF direto
            if "application/pdf" in self.driver.execute_script("return document.contentType"):
                print("‚úÖ PDF carregado diretamente")
                return True
            
            # Procurar por links de download na p√°gina
            download_links = self.driver.find_elements(By.PARTIAL_LINK_TEXT, "Download")
            if not download_links:
                download_links = self.driver.find_elements(By.PARTIAL_LINK_TEXT, "Baixar")
            
            if download_links:
                print(f"üîó Encontrado {len(download_links)} link(s) de download")
                download_links[0].click()
                time.sleep(5)  # Aguardar download iniciar
                return True
            
            # Procurar por iframes com PDF
            iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
            for iframe in iframes:
                src = iframe.get_attribute("src")
                if src and (".pdf" in src or "frmGeraPDF" in src):
                    print(f"üìÑ PDF encontrado em iframe: {src}")
                    self.driver.get(src)
                    time.sleep(5)
                    return True
            
            # √öltima tentativa: procurar qualquer link com .pdf
            pdf_links = self.driver.find_elements(By.XPATH, "//a[contains(@href, '.pdf')]")
            if pdf_links:
                print(f"üìé Encontrado link PDF direto")
                pdf_links[0].click()
                time.sleep(5)
                return True
            
            print("‚ùå N√£o foi poss√≠vel encontrar o PDF na p√°gina")
            return False
            
        except Exception as e:
            print(f"‚ùå Erro ao baixar documento: {e}")
            return False
    
    def extrair_releases_ipe(self, empresa: str, ano: int = 2025) -> list:
        """
        Extrai releases de resultados do arquivo IPE.
        """
        ipe_file = f"ipe_cia_aberta_{ano}.csv"
        if not Path(ipe_file).exists():
            print(f"‚ùå Arquivo {ipe_file} n√£o encontrado")
            return []
        
        # Ler arquivo IPE
        df = pd.read_csv(ipe_file, sep=';', encoding='latin-1')
        
        # Filtrar por empresa
        df_empresa = df[df['Nome_Companhia'].str.contains(empresa.upper(), case=False, na=False)]
        
        # Palavras-chave para releases de resultados
        palavras_resultado = ['resultado', 'trimestre', 'itr', '1t', '2t', '3t', '4t', 
                            'release', 'earnings', 'desempenho', 'demonstra√ß√µes']
        
        # Filtrar por assunto
        mask = df_empresa['Assunto'].str.lower().str.contains('|'.join(palavras_resultado), na=False)
        releases = df_empresa[mask]
        
        # Converter para lista de dicion√°rios
        releases_list = []
        for _, row in releases.iterrows():
            releases_list.append({
                'empresa': row['Nome_Companhia'],
                'data': row['Data_Entrega'],
                'assunto': row['Assunto'],
                'categoria': row['Categoria'],
                'url': row['Link_Download']
            })
        
        # Ordenar por data (mais recente primeiro)
        releases_list.sort(key=lambda x: x['data'], reverse=True)
        
        return releases_list
    
    def baixar_releases_empresa(self, empresa: str, ano: int = 2025, limite: int = None):
        """
        Baixa releases de uma empresa.
        """
        print(f"\nüè¢ Baixando releases de {empresa} - {ano}")
        print("=" * 50)
        
        # Extrair releases
        releases = self.extrair_releases_ipe(empresa, ano)
        
        if not releases:
            print(f"‚ùå Nenhum release encontrado para {empresa}")
            return
        
        print(f"‚úÖ Encontrados {len(releases)} releases")
        
        # Aplicar limite se especificado
        if limite:
            releases = releases[:limite]
        
        # Iniciar navegador
        if not self.iniciar_navegador():
            return
        
        # Criar pasta da empresa
        empresa_dir = self.download_dir / empresa.upper()
        empresa_dir.mkdir(exist_ok=True)
        
        # Baixar cada release
        sucessos = 0
        erros = 0
        
        for i, release in enumerate(releases, 1):
            print(f"\n[{i}/{len(releases)}] {release['assunto'][:60]}...")
            
            # Gerar nome do arquivo
            data_clean = release['data'].replace('-', '')[:8]
            assunto_clean = re.sub(r'[^\w\s-]', '', release['assunto'])[:50]
            nome_arquivo = f"{data_clean}_{assunto_clean}.pdf"
            
            # Baixar
            if self.baixar_documento_cvm(release['url'], nome_arquivo):
                sucessos += 1
                print(f"‚úÖ Download conclu√≠do")
            else:
                erros += 1
                print(f"‚ùå Falha no download")
            
            # Pausa entre downloads
            if i < len(releases):
                time.sleep(2)
        
        # Fechar navegador
        self.fechar_navegador()
        
        # Resumo
        print(f"\nüìä RESUMO:")
        print(f"   ‚úÖ Downloads bem-sucedidos: {sucessos}")
        print(f"   ‚ùå Downloads com erro: {erros}")
        print(f"   üìÅ Arquivos salvos em: {empresa_dir}")
        
        # Salvar relat√≥rio
        relatorio = {
            'empresa': empresa,
            'data_execucao': datetime.now().isoformat(),
            'releases_encontrados': len(releases),
            'downloads_sucesso': sucessos,
            'downloads_erro': erros,
            'pasta_destino': str(empresa_dir),
            'releases': releases
        }
        
        relatorio_file = empresa_dir / f"relatorio_{empresa}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(relatorio_file, 'w', encoding='utf-8') as f:
            json.dump(relatorio, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìù Relat√≥rio salvo: {relatorio_file}")


def main():
    """
    Menu principal.
    """
    print("üåê DOWNLOAD DE RELEASES COM SELENIUM")
    print("=" * 40)
    print("\n‚ö†Ô∏è  REQUISITOS:")
    print("   - Google Chrome instalado")
    print("   - ChromeDriver compat√≠vel com sua vers√£o do Chrome")
    print("   - pip install selenium pandas")
    
    downloader = ReleaseDownloaderSelenium()
    
    # Verificar se arquivo IPE existe
    ano = 2025
    ipe_file = f"ipe_cia_aberta_{ano}.csv"
    if not Path(ipe_file).exists():
        print(f"\n‚ùå Arquivo {ipe_file} n√£o encontrado!")
        print("   Execute primeiro o script de extra√ß√£o CVM")
        return
    
    # Menu interativo
    print("\nüìä DOWNLOAD INTERATIVO")
    empresa = input("üè¢ Digite o nome da empresa (ex: VALE, PETROBRAS): ").strip().upper()
    
    if not empresa:
        print("‚ùå Nome da empresa √© obrigat√≥rio")
        return
    
    limite_str = input("üì• Quantos releases baixar? (Enter = todos): ").strip()
    limite = int(limite_str) if limite_str.isdigit() else None
    
    # Executar download
    downloader.baixar_releases_empresa(empresa, ano, limite)


if __name__ == "__main__":
    main()