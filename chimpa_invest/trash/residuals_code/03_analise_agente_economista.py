#!/usr/bin/env python3
"""
An√°lise com Agente Economista
==============================
Integra o agente economista com o sistema CVM para an√°lise inteligente.
"""

import sys
from pathlib import Path
from datetime import datetime

# Adicionar pasta agents ao path
sys.path.append(str(Path(__file__).parent / 'agents'))

from economist_agent import EconomistAgent
from mcp_pdf_reader import MCPPDFReader
from financial_knowledge import FinancialKnowledge


class AnaliseAgenteEconomista:
    """
    Interface para an√°lise com agente economista.
    """
    
    def __init__(self):
        self.agent = EconomistAgent()
        self.pdf_reader = MCPPDFReader()
        self.knowledge = FinancialKnowledge()
        
    def listar_pdfs_disponiveis(self):
        """
        Lista PDFs dispon√≠veis para an√°lise.
        """
        pending_path = Path("documents/pending")
        pdfs = []
        
        if pending_path.exists():
            pdfs = list(pending_path.glob("*.pdf"))
        
        if not pdfs:
            print("\n‚ùå Nenhum PDF encontrado em documents/pending/")
            print("   Execute primeiro o download de releases trimestrais (op√ß√£o 3)")
            return []
        
        print(f"\nüìÑ PDFs dispon√≠veis para an√°lise ({len(pdfs)}):")
        for i, pdf in enumerate(pdfs, 1):
            size_mb = pdf.stat().st_size / (1024 * 1024)
            print(f"   [{i}] {pdf.name} ({size_mb:.1f} MB)")
        
        return pdfs
    
    def analisar_pdf(self, pdf_path):
        """
        Analisa um PDF espec√≠fico.
        """
        print(f"\nüîç Analisando: {pdf_path.name}")
        print("=" * 60)
        
        # Extrair nome da empresa do arquivo
        company_name = pdf_path.name.split('_')[0]
        
        # Processar PDF
        print("\n‚è≥ Processando documento...")
        try:
            chunks = self.pdf_reader.read_pdf(pdf_path)
            print(f"‚úÖ Documento processado: {len(chunks)} chunks")
            
            # Extrair dados financeiros
            financial_data = self.pdf_reader.extract_financial_data(pdf_path)
            if financial_data:
                print(f"‚úÖ Dados financeiros extra√≠dos: {len(financial_data)} tabelas")
            
            # An√°lise do economista
            interpretation = self.agent.interpret_earnings_release(
                pdf_path,
                company_name=company_name,
                ticker=f"{company_name}3"  # Assumindo a√ß√£o ON
            )
            
            # Exibir resultados
            self._exibir_analise(interpretation, company_name)
            
            # Salvar an√°lise
            self._salvar_analise(interpretation, company_name)
            
            return interpretation
            
        except Exception as e:
            print(f"‚ùå Erro ao analisar PDF: {e}")
            return None
    
    def _exibir_analise(self, interpretation, company_name):
        """
        Exibe an√°lise formatada.
        """
        print(f"\nüìä AN√ÅLISE DO AGENTE ECONOMISTA - {company_name}")
        print("=" * 60)
        
        # Destaques
        if 'highlights' in interpretation:
            print("\nüìà PRINCIPAIS DESTAQUES:")
            for highlight in interpretation['highlights']:
                print(f"   ‚Ä¢ {highlight}")
        
        # M√©tricas
        if 'metrics' in interpretation:
            print("\nüí∞ M√âTRICAS FINANCEIRAS:")
            for metric, value in interpretation['metrics'].items():
                print(f"   ‚Ä¢ {metric}: {value}")
        
        # Riscos
        if 'risks' in interpretation:
            print("\n‚ö†Ô∏è RISCOS IDENTIFICADOS:")
            for risk in interpretation['risks']:
                print(f"   ‚Ä¢ {risk}")
        
        # Oportunidades
        if 'opportunities' in interpretation:
            print("\n‚ú® OPORTUNIDADES:")
            for opp in interpretation['opportunities']:
                print(f"   ‚Ä¢ {opp}")
        
        # Recomenda√ß√£o
        if 'recommendation' in interpretation:
            print(f"\nüéØ RECOMENDA√á√ÉO: {interpretation['recommendation']}")
    
    def _salvar_analise(self, interpretation, company_name):
        """
        Salva an√°lise em arquivo.
        """
        import json
        
        output_dir = Path("analises_agente")
        output_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = output_dir / f"analise_{company_name}_{timestamp}.json"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(interpretation, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ An√°lise salva em: {output_file}")
    
    def comparar_empresas_setor(self):
        """
        Compara empresas do mesmo setor.
        """
        print("\nüè¢ AN√ÅLISE COMPARATIVA SETORIAL")
        print("=" * 60)
        
        # Listar setores dispon√≠veis
        setores = list(self.knowledge.sector_benchmarks.keys())
        
        print("\nSetores dispon√≠veis:")
        for i, setor in enumerate(setores, 1):
            print(f"   [{i}] {setor}")
        
        try:
            escolha = int(input("\nEscolha o setor (n√∫mero): ")) - 1
            setor = setores[escolha]
            
            print(f"\nüìä Benchmarks do setor {setor}:")
            benchmarks = self.knowledge.sector_benchmarks[setor]
            
            for metric, value in benchmarks.items():
                formula_info = self.knowledge.formulas.get(metric, {})
                print(f"\n{metric}:")
                print(f"   Valor m√©dio: {value}")
                if formula_info:
                    print(f"   F√≥rmula: {formula_info['formula']}")
                    print(f"   Interpreta√ß√£o: {formula_info['interpretation']}")
            
        except (ValueError, IndexError):
            print("‚ùå Sele√ß√£o inv√°lida")
    
    def analisar_contexto_macro(self):
        """
        An√°lise do contexto macroecon√¥mico.
        """
        print("\nüåç AN√ÅLISE DO CONTEXTO MACROECON√îMICO")
        print("=" * 60)
        
        # Simula√ß√£o de dados (em produ√ß√£o viriam de APIs)
        contexto = {
            'SELIC': {'valor': 11.25, 'variacao': -0.50},
            'IPCA': {'valor': 4.50, 'variacao': 0.15},
            'IGP-M': {'valor': 3.80, 'variacao': -0.20},
            'CDI': {'valor': 11.15, 'variacao': -0.50},
            'USD/BRL': {'valor': 5.02, 'variacao': 2.10},
            'IBOVESPA': {'valor': 128500, 'variacao': 8.5}
        }
        
        print("\nüìä INDICADORES ECON√îMICOS:")
        for indicador, dados in contexto.items():
            info = self.knowledge.indicators.get(indicador.replace('/', '_'), {})
            print(f"\n{indicador}:")
            print(f"   Valor atual: {dados['valor']}")
            print(f"   Varia√ß√£o YTD: {dados['variacao']:+.1f}%")
            if info:
                print(f"   Impacto: {info.get('impact', 'N/A')}")
        
        print("\nüéØ IMPLICA√á√ïES PARA O MERCADO:")
        
        # An√°lise baseada nos indicadores
        if contexto['SELIC']['valor'] > 10:
            print("\nüìå Taxa de Juros Elevada:")
            print("   ‚Ä¢ Press√£o sobre empresas alavancadas")
            print("   ‚Ä¢ Renda fixa mais atrativa")
            print("   ‚Ä¢ Valuations sob press√£o")
        
        if contexto['IPCA']['valor'] > 4.0:
            print("\nüìå Infla√ß√£o Pr√≥xima/Acima da Meta:")
            print("   ‚Ä¢ Empresas com pricing power beneficiadas")
            print("   ‚Ä¢ Aten√ß√£o a margens de lucro")
            print("   ‚Ä¢ Poss√≠vel alta adicional de juros")
        
        if contexto['USD/BRL']['valor'] > 5.0:
            print("\nüìå D√≥lar Elevado:")
            print("   ‚Ä¢ Exportadoras beneficiadas")
            print("   ‚Ä¢ Press√£o sobre importadoras")
            print("   ‚Ä¢ Infla√ß√£o importada")


def menu_analise_agente():
    """
    Menu principal da an√°lise com agente.
    """
    analise = AnaliseAgenteEconomista()
    
    while True:
        print("\nü§ñ AN√ÅLISE COM AGENTE ECONOMISTA")
        print("=" * 60)
        print("[1] Analisar PDF de release de resultados")
        print("[2] An√°lise comparativa setorial")
        print("[3] Contexto macroecon√¥mico")
        print("[4] Voltar ao menu principal")
        
        escolha = input("\nEscolha uma op√ß√£o: ")
        
        if escolha == '1':
            pdfs = analise.listar_pdfs_disponiveis()
            if pdfs:
                try:
                    idx = int(input("\nEscolha o PDF (n√∫mero): ")) - 1
                    if 0 <= idx < len(pdfs):
                        analise.analisar_pdf(pdfs[idx])
                    else:
                        print("‚ùå Sele√ß√£o inv√°lida")
                except ValueError:
                    print("‚ùå Entrada inv√°lida")
        
        elif escolha == '2':
            analise.comparar_empresas_setor()
        
        elif escolha == '3':
            analise.analisar_contexto_macro()
        
        elif escolha == '4':
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida")
        
        input("\n‚úÖ Pressione ENTER para continuar...")


if __name__ == "__main__":
    menu_analise_agente()