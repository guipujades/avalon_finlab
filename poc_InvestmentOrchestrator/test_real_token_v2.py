#!/usr/bin/env python3
"""
Teste Real do Token BTG API - Vers√£o 2
Usando cliente refatorado com retry e diagn√≥sticos
"""

import time
import json
from pathlib import Path
from btg_api_client import BTGAPIClient


def test_real_token_with_client():
    """Teste usando o cliente refatorado"""
    print("üîß TESTE REAL V2: Token BTG via Cliente Refatorado")
    print("="*60)
    
    # Caminho das credenciais reais
    json_file_apiaccess = str(Path(Path.home(), 'Desktop', 'api_btg_access.json'))
    
    try:
        print(f"üìÇ Carregando credenciais de: {json_file_apiaccess}")
        
        # Verifica se arquivo existe
        if not Path(json_file_apiaccess).exists():
            print(f"‚ùå Arquivo n√£o encontrado: {json_file_apiaccess}")
            return False
        
        # Cria cliente com credenciais reais
        print("üîÑ Inicializando cliente BTG...")
        client = BTGAPIClient(credentials_path=json_file_apiaccess)
        print("‚úÖ Cliente BTG inicializado")
        
        # Tenta obter token com retry
        max_attempts = 3
        
        for attempt in range(1, max_attempts + 1):
            print(f"\nüîÑ Tentativa {attempt}/{max_attempts} - Obtendo token...")
            
            try:
                # Tenta obter o token
                token = client.get_access_token()
                
                if token:
                    print(f"\nüéâ TOKEN OBTIDO COM SUCESSO!")
                    print(f"‚úÖ Token: {token}")
                    print(f"‚úÖ Tamanho: {len(token)} caracteres")
                    print(f"‚úÖ Tipo: {type(token)}")
                    
                    # Mostra primeiros e √∫ltimos caracteres
                    if len(token) > 20:
                        print(f"‚úÖ In√≠cio: {token[:20]}...")
                        print(f"‚úÖ Fim: ...{token[-20:]}")
                    
                    # Salva token para debug
                    token_file = Path.home() / 'Desktop' / 'btg_token_real.txt'
                    with open(token_file, 'w') as f:
                        f.write(f"Token real obtido em: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                        f.write(f"Token: {token}\n")
                    print(f"‚úÖ Token salvo em: {token_file}")
                    
                    # Testa se token √© v√°lido (fazendo uma requisi√ß√£o simples)
                    print(f"\nüß™ Testando validade do token...")
                    test_result = client.test_connection()
                    
                    if test_result:
                        print("‚úÖ Token v√°lido - conex√£o teste bem-sucedida")
                    else:
                        print("‚ö†Ô∏è Token obtido mas teste de conex√£o falhou")
                    
                    return True
                    
                else:
                    print("‚ùå Token n√£o obtido (retornou None/vazio)")
                    
            except Exception as e:
                print(f"‚ùå Erro na tentativa {attempt}: {e}")
                
                # Se n√£o √© a √∫ltima tentativa, espera antes de tentar novamente
                if attempt < max_attempts:
                    wait_time = attempt * 2  # 2s, 4s, 6s...
                    print(f"‚è≥ Aguardando {wait_time}s antes da pr√≥xima tentativa...")
                    time.sleep(wait_time)
        
        print(f"\n‚ùå Falha ap√≥s {max_attempts} tentativas")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False


def test_credentials_file():
    """Testa se o arquivo de credenciais est√° correto"""
    print("\nüîç VERIFICA√á√ÉO DO ARQUIVO DE CREDENCIAIS")
    print("="*50)
    
    json_file_apiaccess = str(Path(Path.home(), 'Desktop', 'api_btg_access.json'))
    
    try:
        with open(json_file_apiaccess, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        print("‚úÖ Arquivo JSON v√°lido")
        
        # Verifica estrutura
        required_keys = ['client_id', 'client_secret']
        missing_keys = [key for key in required_keys if key not in data]
        
        if missing_keys:
            print(f"‚ùå Chaves ausentes: {missing_keys}")
            return False
        
        client_id = data['client_id']
        client_secret = data['client_secret']
        
        print(f"‚úÖ client_id: {client_id[:15]}... ({len(client_id)} chars)")
        print(f"‚úÖ client_secret: {client_secret[:15]}... ({len(client_secret)} chars)")
        
        # Verifica se s√£o strings n√£o vazias
        if not client_id or not client_secret:
            print("‚ùå client_id ou client_secret est√£o vazios")
            return False
        
        # Verifica tamanhos razo√°veis
        if len(client_id) < 10 or len(client_secret) < 10:
            print("‚ö†Ô∏è Credenciais parecem muito curtas")
        
        print("‚úÖ Estrutura do arquivo de credenciais OK")
        return True
        
    except FileNotFoundError:
        print(f"‚ùå Arquivo n√£o encontrado: {json_file_apiaccess}")
        return False
    except json.JSONDecodeError:
        print("‚ùå Arquivo JSON inv√°lido")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar credenciais: {e}")
        return False


def main():
    """Executa todos os testes"""
    print("üöÄ TESTE REAL DO TOKEN BTG - VERS√ÉO 2")
    print("="*60)
    print("Objetivo: Capturar token real usando cliente refatorado")
    print("="*60)
    
    # Primeiro verifica credenciais
    creds_ok = test_credentials_file()
    
    if not creds_ok:
        print("\n‚ùå Problema com arquivo de credenciais - abortando")
        return
    
    # Tenta obter token
    success = test_real_token_with_client()
    
    print("\n" + "="*60)
    if success:
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("‚úÖ Token real capturado da API BTG")
        print("‚úÖ Cliente refatorado funcionando")
    else:
        print("‚ùå TESTE FALHOU")
        print("‚ùå N√£o foi poss√≠vel obter o token")
        print("üí° Poss√≠veis causas:")
        print("   ‚Ä¢ Problema tempor√°rio na API BTG")
        print("   ‚Ä¢ Credenciais inv√°lidas ou expiradas")
        print("   ‚Ä¢ Mudan√ßa no endpoint ou formato da API")
    print("="*60)


if __name__ == "__main__":
    main() 