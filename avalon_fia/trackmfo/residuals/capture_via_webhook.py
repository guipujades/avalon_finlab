#!/usr/bin/env python3
"""
Script para capturar carteiras via webhook API BTG
Vers√£o simplificada sem servidor webhook
"""

import json
import requests
import base64
import uuid
import time
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class CapturaViaWebhook:
    """Captura dados usando webhook API"""
    
    def __init__(self):
        self.json_file = Path.home() / 'Desktop' / 'api_btg_access.json'
        self.output_dir = Path.home() / 'Desktop' / 'Carteiras_BTG'
        self.output_dir.mkdir(exist_ok=True)
        
    def get_token(self):
        """Obt√©m token da API"""
        with open(self.json_file) as f:
            data = json.load(f)
        
        credentials = f"{data['client_id']}:{data['client_secret']}"
        base64_string = base64.b64encode(credentials.encode()).decode()
        
        url = 'https://api.btgpactual.com/iaas-auth/api/v1/authorization/oauth2/accesstoken'
        headers = {
            'x-id-partner-request': str(uuid.uuid4()),
            'Authorization': f'Basic {base64_string}',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        response = requests.post(url, data={'grant_type': 'client_credentials'}, headers=headers)
        
        if response.status_code == 200:
            return response.headers.get('access_token')
        return None
    
    def solicitar_posicoes(self, token, date=None):
        """Solicita posi√ß√µes via webhook"""
        
        if date is None:
            date = datetime.now().strftime('%Y-%m-%d')
        
        headers = {
            'x-id-partner-request': str(uuid.uuid4()),
            'access_token': token,
            'Content-Type': 'application/json'
        }
        
        # URL tempor√°ria para receber webhook (n√£o ser√° usada realmente)
        webhook_url = "https://webhook.site/teste-btg"
        
        print(f"\nSolicitando posi√ß√µes para data: {date}")
        
        # 1. Tentar webhook de posi√ß√µes
        url = 'https://api.btgpactual.com/iaas-api-position/api/v1/position/webhook'
        body = {
            "webhookUrl": webhook_url,
            "date": date
        }
        
        response = requests.post(url, headers=headers, json=body)
        print(f"Status webhook posi√ß√µes: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Solicita√ß√£o de posi√ß√µes enviada")
            return response.json()
        else:
            print(f"Response: {response.text}")
            
        # 2. Tentar refresh de posi√ß√µes
        print("\nTentando refresh de posi√ß√µes...")
        url = 'https://api.btgpactual.com/iaas-api-position/api/v1/position/refresh'
        body = {"date": date}
        
        response = requests.post(url, headers=headers, json=body)
        print(f"Status refresh: {response.status_code}")
        
        if response.status_code in [200, 202]:
            print("‚úÖ Refresh solicitado")
            # Aguardar processamento
            time.sleep(5)
            
            # Tentar obter arquivo do parceiro novamente
            url = 'https://api.btgpactual.com/iaas-api-position/api/v1/position/partner'
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('response') and data['response'].get('url'):
                    print("‚úÖ Arquivo de posi√ß√µes dispon√≠vel!")
                    return data
        
        return None
    
    def processar_resposta_webhook(self, response_data):
        """Processa resposta do webhook"""
        
        if not response_data:
            print("‚ùå Sem dados para processar")
            return
        
        # Salvar resposta para an√°lise
        output_file = self.output_dir / f'webhook_response_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(response_data, f, indent=2, ensure_ascii=False)
        
        print(f"\n‚úÖ Resposta salva em: {output_file}")
        print("\nAn√°lise da resposta:")
        print(f"- Tipo: {type(response_data)}")
        
        if isinstance(response_data, dict):
            print(f"- Chaves: {list(response_data.keys())}")
            
            # Se tiver URL de arquivo
            if 'response' in response_data:
                resp = response_data['response']
                if isinstance(resp, dict) and 'url' in resp:
                    print(f"\nüì• URL de download encontrada: {resp['url']}")
                    print("\nPr√≥ximos passos:")
                    print("1. Baixar o arquivo ZIP da URL")
                    print("2. Extrair os JSONs das contas")
                    print("3. Processar cada conta individualmente")
                    
                    # Aqui voc√™ poderia implementar o download e processamento
                    # Similar ao que fizemos antes
    
    def solicitar_movimentacoes(self, token, account_number, start_date=None, end_date=None):
        """Solicita movimenta√ß√µes de uma conta"""
        
        if start_date is None:
            start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        if end_date is None:
            end_date = datetime.now().strftime('%Y-%m-%d')
        
        headers = {
            'x-id-partner-request': str(uuid.uuid4()),
            'access_token': token,
            'Content-Type': 'application/json'
        }
        
        webhook_url = "https://webhook.site/teste-btg"
        
        print(f"\nSolicitando movimenta√ß√µes da conta {account_number}")
        print(f"Per√≠odo: {start_date} a {end_date}")
        
        url = f'https://api.btgpactual.com/iaas-api-operation/api/v1/operation/history/{account_number}'
        params = {
            'startDate': start_date,
            'endDate': end_date,
            'webhookUrl': webhook_url
        }
        
        response = requests.get(url, headers=headers, params=params)
        print(f"Status: {response.status_code}")
        
        if response.status_code in [200, 202]:
            print("‚úÖ Solicita√ß√£o enviada")
            return response.json()
        else:
            print(f"Response: {response.text}")
            return None
    
    def solicitar_rentabilidade(self, token, month, year):
        """Solicita rentabilidade mensal"""
        
        headers = {
            'x-id-partner-request': str(uuid.uuid4()),
            'access_token': token,
            'Content-Type': 'application/json'
        }
        
        webhook_url = "https://webhook.site/teste-btg"
        
        print(f"\nSolicitando rentabilidade {month}/{year}")
        
        url = 'https://api.btgpactual.com/api-partner-report-hub/api/v1/report/customer-profitability'
        body = {
            'referenceMonth': str(month).zfill(2),
            'referenceYear': str(year),
            'webhookUrl': webhook_url
        }
        
        response = requests.post(url, headers=headers, json=body)
        print(f"Status: {response.status_code}")
        
        if response.status_code in [200, 202]:
            print("‚úÖ Solicita√ß√£o enviada")
            return response.json()
        else:
            print(f"Response: {response.text}")
            return None


def main():
    """Fun√ß√£o principal"""
    print("="*60)
    print("Captura de Carteiras BTG via Webhook")
    print("="*60)
    
    captura = CapturaViaWebhook()
    
    # Obter token
    token = captura.get_token()
    if not token:
        print("‚ùå Falha ao obter token")
        return
    
    print("‚úÖ Token obtido")
    
    # Menu de op√ß√µes
    while True:
        print("\n" + "-"*40)
        print("Escolha uma op√ß√£o:")
        print("1. Solicitar posi√ß√µes (todas as contas)")
        print("2. Solicitar movimenta√ß√µes (conta espec√≠fica)")
        print("3. Solicitar rentabilidade mensal")
        print("4. Sair")
        
        opcao = input("\nOp√ß√£o: ").strip()
        
        if opcao == '1':
            # Posi√ß√µes
            date = input("Data (YYYY-MM-DD) ou Enter para hoje: ").strip()
            if not date:
                date = None
            
            result = captura.solicitar_posicoes(token, date)
            captura.processar_resposta_webhook(result)
            
        elif opcao == '2':
            # Movimenta√ß√µes
            account = input("N√∫mero da conta: ").strip()
            if account:
                result = captura.solicitar_movimentacoes(token, account)
                captura.processar_resposta_webhook(result)
            
        elif opcao == '3':
            # Rentabilidade
            month = input("M√™s (1-12): ").strip()
            year = input("Ano (YYYY): ").strip()
            
            if month and year:
                result = captura.solicitar_rentabilidade(token, month, year)
                captura.processar_resposta_webhook(result)
                
        elif opcao == '4':
            break
        
        else:
            print("Op√ß√£o inv√°lida")
    
    print("\n‚úÖ Finalizado")


if __name__ == '__main__':
    main()