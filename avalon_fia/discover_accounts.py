#!/usr/bin/env python3
"""
Script para descobrir contas e fundos dispon√≠veis na API BTG
"""

import sys
import os
from pathlib import Path
import json

sys.path.append(os.path.join(os.path.dirname(__file__), 'trackfia'))

from btg_api_client import create_btg_client
import requests


def discover_available_resources():
    """Descobre recursos dispon√≠veis na API"""
    print("üîç DESCOBRINDO RECURSOS DISPON√çVEIS NA API BTG")
    print("="*60)
    
    try:
        client = create_btg_client()
        token = client.get_access_token()
        
        # Headers para requisi√ß√µes
        headers = {
            'access_token': token,
            'Content-Type': 'application/json'
        }
        
        # 1. Tentar endpoint de parceiro sem CNPJ
        print("\n1Ô∏è‚É£ Testando endpoint de parceiro...")
        try:
            response = requests.get(
                f"{client.base_url}/iaas-api-position/api/v1/position/partner",
                headers=headers,
                timeout=30
            )
            print(f"Status: {response.status_code}")
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ Resposta obtida:")
                print(json.dumps(data, indent=2)[:500])
                
                # Se houver URL de download, baixar e analisar
                if 'downloadUrl' in data:
                    print(f"\nüì• URL de download encontrada: {data['downloadUrl']}")
            else:
                print(f"Resposta: {response.text[:200]}")
        except Exception as e:
            print(f"‚ùå Erro: {e}")
        
        # 2. Tentar listar contas diretamente
        print("\n2Ô∏è‚É£ Tentando listar contas...")
        endpoints_to_try = [
            "/iaas-account-management/api/v1/account-management/accounts",
            "/iaas-account-management/api/v1/account-management/account",
            "/iaas-api-position/api/v1/position/accounts",
            "/api/v1/accounts"
        ]
        
        for endpoint in endpoints_to_try:
            try:
                print(f"\nTestando: {endpoint}")
                response = requests.get(
                    f"{client.base_url}{endpoint}",
                    headers=headers,
                    timeout=10
                )
                if response.status_code == 200:
                    print("‚úÖ Endpoint encontrado!")
                    data = response.json()
                    print(json.dumps(data, indent=2)[:300])
                    break
                elif response.status_code != 404:
                    print(f"Status: {response.status_code}")
            except Exception as e:
                if "404" not in str(e):
                    print(f"Erro: {type(e).__name__}")
        
        # 3. Tentar endpoint de fundos
        print("\n3Ô∏è‚É£ Testando endpoints de fundos...")
        fund_endpoints = [
            "/iaas-api-fund/api/v1/fund",
            "/api/v1/funds",
            "/api/v1/investment-funds"
        ]
        
        for endpoint in fund_endpoints:
            try:
                print(f"\nTestando: {endpoint}")
                response = requests.get(
                    f"{client.base_url}{endpoint}",
                    headers=headers,
                    timeout=10
                )
                if response.status_code == 200:
                    print("‚úÖ Endpoint de fundos encontrado!")
                    data = response.json()
                    print(json.dumps(data, indent=2)[:300])
                    break
                elif response.status_code != 404:
                    print(f"Status: {response.status_code}")
            except Exception as e:
                if "404" not in str(e):
                    print(f"Erro: {type(e).__name__}")
        
        # 4. Verificar permiss√µes
        print("\n4Ô∏è‚É£ Verificando permiss√µes do token...")
        try:
            # Decodificar JWT (sem validar assinatura)
            import base64
            token_parts = token.split('.')
            if len(token_parts) >= 2:
                # Adicionar padding se necess√°rio
                payload = token_parts[1]
                payload += '=' * (4 - len(payload) % 4)
                
                decoded = base64.b64decode(payload)
                token_data = json.loads(decoded)
                
                print("\nüìã Informa√ß√µes do token:")
                for key in ['scope', 'permissions', 'roles', 'cnpj', 'partner', 'sub']:
                    if key in token_data:
                        print(f"   {key}: {token_data[key]}")
        except Exception as e:
            print(f"N√£o foi poss√≠vel decodificar token: {e}")
        
        # 5. Sugest√µes baseadas nos resultados
        print("\nüí° SUGEST√ïES:")
        print("1. Se voc√™ tem n√∫meros de conta espec√≠ficos, use:")
        print("   client.get_account_position('NUMERO_DA_CONTA')")
        print("\n2. Para fundos Avalon FIA, pode ser necess√°rio:")
        print("   - API espec√≠fica de fundos (funds.btgpactual.com)")
        print("   - Credenciais diferentes")
        print("   - Permiss√µes adicionais")
        
    except Exception as e:
        print(f"\n‚ùå Erro geral: {e}")


if __name__ == "__main__":
    discover_available_resources()