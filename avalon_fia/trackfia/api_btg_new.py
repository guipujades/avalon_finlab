"""
Adaptador para integrar a nova API BTG com o c√≥digo existente
"""

import json
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta
import logging
import zipfile
import tempfile
import requests
from typing import Optional, Dict, Tuple

from btg_api_client import BTGAPIClient, create_btg_client

logger = logging.getLogger(__name__)


def fund_data_new(find_type='positions', account_number: Optional[str] = None):
    """
    Vers√£o atualizada da fun√ß√£o fund_data usando a nova API BTG
    
    Args:
        find_type: 'positions' para posi√ß√µes ou 'info' para informa√ß√µes
        account_number: N√∫mero da conta (opcional)
        
    Returns:
        Dados da conta ou posi√ß√µes
    """
    try:
        # Criar cliente BTG
        client = create_btg_client()
        
        if find_type == 'positions':
            if account_number:
                # Posi√ß√£o de uma conta espec√≠fica
                logger.info(f"Obtendo posi√ß√£o da conta {account_number}")
                position_data = client.get_account_position(account_number)
                
                # Converter para DataFrame se necess√°rio
                df = process_position_data(position_data)
                
                # Extrair informa√ß√µes do header
                header = {
                    'dtposicao': datetime.now().strftime('%Y-%m-%d'),
                    'patliq': position_data.get('TotalAmount', 0),
                    'nome': f'Conta {account_number}'
                }
                
                return df, position_data, header
            else:
                # Todas as posi√ß√µes
                logger.info("Obtendo posi√ß√µes de todas as contas")
                all_positions = client.get_all_accounts_positions()
                
                # Processar resposta
                return process_all_positions(all_positions)
                
        elif find_type == 'info':
            if account_number:
                # Informa√ß√µes de conta espec√≠fica
                info = client.get_account_info(account_number)
                return info
            else:
                logger.warning("N√∫mero da conta necess√°rio para obter informa√ß√µes")
                return None
                
        else:
            logger.error(f"Tipo {find_type} n√£o suportado")
            return None
            
    except Exception as e:
        logger.error(f"Erro ao obter dados: {e}")
        raise


def process_position_data(position_data: Dict) -> pd.DataFrame:
    """
    Processa dados de posi√ß√£o para DataFrame
    
    Args:
        position_data: Dados brutos da API
        
    Returns:
        DataFrame processado
    """
    records = []
    
    # Processar diferentes tipos de ativos
    if 'InvestmentFund' in position_data:
        for fund in position_data['InvestmentFund']:
            fund_info = fund.get('Fund', {})
            for acquisition in fund.get('Acquisition', []):
                records.append({
                    'tipo': 'Fundo',
                    'nome': fund_info.get('FundName', ''),
                    'cnpj': fund_info.get('CNPJFund', ''),
                    'quantidade': acquisition.get('Quantity', 0),
                    'valor': acquisition.get('GrossAssetValue', 0),
                    'data': acquisition.get('AcquisitionDate', '')
                })
    
    if 'Equities' in position_data:
        for equity in position_data['Equities']:
            for stock in equity.get('StockPositions', []):
                records.append({
                    'tipo': 'A√ß√£o',
                    'nome': stock.get('Ticker', ''),
                    'quantidade': stock.get('Quantity', 0),
                    'valor': stock.get('GrossValue', 0),
                    'preco_medio': stock.get('AveragePrice', 0)
                })
    
    if 'FixedIncome' in position_data:
        for bond in position_data['FixedIncome']:
            records.append({
                'tipo': 'Renda Fixa',
                'nome': bond.get('Issuer', ''),
                'valor': bond.get('GrossValue', 0),
                'vencimento': bond.get('MaturityDate', '')
            })
    
    return pd.DataFrame(records)


def process_all_positions(all_positions_response: Dict) -> Tuple[pd.DataFrame, list, dict]:
    """
    Processa resposta de todas as posi√ß√µes
    
    Args:
        all_positions_response: Resposta da API
        
    Returns:
        Tuple com DataFrame, lista de dados e header
    """
    # A resposta cont√©m URLs para download
    download_url = all_positions_response.get('downloadUrl')
    
    if download_url:
        logger.info(f"Baixando arquivo de posi√ß√µes de {download_url}")
        
        # Fazer download do arquivo
        response = requests.get(download_url)
        
        if response.status_code == 200:
            # Salvar temporariamente
            with tempfile.NamedTemporaryFile(delete=False, suffix='.zip') as tmp_file:
                tmp_file.write(response.content)
                tmp_path = tmp_file.name
            
            # Processar ZIP
            df, data_list, header = process_positions_zip(tmp_path)
            
            # Limpar arquivo tempor√°rio
            Path(tmp_path).unlink()
            
            return df, data_list, header
    
    logger.warning("URL de download n√£o encontrada")
    return pd.DataFrame(), [], {}


def process_positions_zip(zip_path: str) -> Tuple[pd.DataFrame, list, dict]:
    """
    Processa arquivo ZIP de posi√ß√µes
    
    Args:
        zip_path: Caminho do arquivo ZIP
        
    Returns:
        Tuple com DataFrame, lista de dados e header
    """
    all_records = []
    header = {
        'dtposicao': datetime.now().strftime('%Y-%m-%d'),
        'patliq': 0,
        'nome': 'Consolidado Avalon'
    }
    
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        # Extrair para diret√≥rio tempor√°rio
        with tempfile.TemporaryDirectory() as tmp_dir:
            zip_ref.extractall(tmp_dir)
            
            # Processar cada arquivo
            for file_name in zip_ref.namelist():
                file_path = Path(tmp_dir) / file_name
                
                if file_path.suffix.lower() in ['.json', '.xml', '.csv']:
                    # Processar arquivo baseado no tipo
                    records = process_position_file(file_path)
                    all_records.extend(records)
    
    # Criar DataFrame consolidado
    df = pd.DataFrame(all_records)
    
    # Calcular patrim√¥nio total
    if 'valor' in df.columns:
        header['patliq'] = df['valor'].sum()
    
    return df, all_records, header


def process_position_file(file_path: Path) -> list:
    """
    Processa arquivo individual de posi√ß√£o
    
    Args:
        file_path: Caminho do arquivo
        
    Returns:
        Lista de registros
    """
    records = []
    
    try:
        if file_path.suffix.lower() == '.json':
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # Processar JSON (adaptar conforme estrutura real)
                df = process_position_data(data)
                records = df.to_dict('records')
                
        elif file_path.suffix.lower() == '.csv':
            df = pd.read_csv(file_path)
            records = df.to_dict('records')
            
        # Adicionar outros formatos conforme necess√°rio
        
    except Exception as e:
        logger.error(f"Erro ao processar {file_path}: {e}")
    
    return records


def get_account_movements_df(account_number: str, days_back: int = 30) -> pd.DataFrame:
    """
    Obt√©m movimenta√ß√µes de conta como DataFrame
    
    Args:
        account_number: N√∫mero da conta
        days_back: Dias para voltar no hist√≥rico
        
    Returns:
        DataFrame com movimenta√ß√µes
    """
    try:
        client = create_btg_client()
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=days_back)
        
        movements = client.get_account_movements(
            account_number,
            start_date.strftime('%Y-%m-%d'),
            end_date.strftime('%Y-%m-%d')
        )
        
        # Converter para DataFrame
        # Nota: A resposta real vir√° via webhook
        df = pd.DataFrame()  # Placeholder
        
        return df
        
    except Exception as e:
        logger.error(f"Erro ao obter movimenta√ß√µes: {e}")
        return pd.DataFrame()


# Fun√ß√µes de compatibilidade com c√≥digo antigo
def auth_apiBTG(config):
    """Compatibilidade com fun√ß√£o antiga"""
    try:
        client = BTGAPIClient(
            client_id=config.get('client_id'),
            client_secret=config.get('client_secret')
        )
        token = client.get_access_token()
        return token, config
    except Exception as e:
        logger.error(f"Erro na autentica√ß√£o: {e}")
        raise


def fia_main_info(token, data):
    """Compatibilidade com fun√ß√£o antiga - retorna informa√ß√µes mockadas"""
    return {
        'fundName': 'AVALON FIA',
        'cnpj': '47.952.345/0001-09',
        'type': 'FIA',
        'status': 'Ativo',
        'api_version': 'Nova API BTG'
    }


if __name__ == "__main__":
    # Teste b√°sico
    print("üß™ Teste do adaptador da nova API")
    
    try:
        # Testar autentica√ß√£o
        client = create_btg_client()
        if client.test_connection():
            print("‚úÖ Conex√£o estabelecida!")
            
            # Testar obten√ß√£o de dados
            # Nota: Precisa de um n√∫mero de conta v√°lido
            # df, data, header = fund_data_new('positions', account_number='12345')
            
    except Exception as e:
        print(f"‚ùå Erro: {e}")